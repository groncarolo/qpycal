import numpy as np
import ctypes

np.set_printoptions(threshold=np.inf)
np.set_printoptions(linewidth=np.inf)
import sys
import numpy
numpy.set_printoptions(threshold=sys.maxsize)



def toffoli(how_many_bits, ctrls):

    state_shape = 2**how_many_bits
    idex = np.identity(state_shape//4)

    zero = np.array([1.,0.])
    one = np.array([0.,1.])

    E00=np.outer (zero, np.conjugate(zero).T)
    E01=np.outer (zero, np.conjugate(one).T)
    E10=np.outer (one, np.conjugate(zero).T)
    E11=np.outer (one, np.conjugate(one).T)
    gnot = np.array([[0., 1.], [1., 0.]]) # not


    ret = np.zeros((state_shape,state_shape))

    if how_many_bits == 2:
        ret = np.kron(E11, gnot)
    else:
        for i in range(2**(how_many_bits-2)): # 8
            print ("CALCULATING " + str(i))
            binary = "{0:>0{1}b}".format(i, how_many_bits -2)
            print(binary)

            if i  in ctrls:
                pr =  gnot
            else:
                pr =  np.identity(2)

            # we read it in reversed order to
            # match endianness of bit we want to
            # turn ON as control
            for c in reversed(binary):
                print ("mult")
                pr = np.kron(E00 if c=='0' else E11, pr)
            pr = np.kron(E11, pr)
            ret +=pr

    idex = np.identity(state_shape//4)
    ide2 = np.identity(2)
    a = np.kron(E00, np.kron(idex, ide2))
    ret = ret + a
    print (ret)
    return ret



# X
# I
# C
# I
# C
g32 = np.array([
    [1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],

    [0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],

    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],

    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  1.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,1.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,1.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,1., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],

    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 1.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,1.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,1. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,1.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],

    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 1.,0.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,1.,0.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,1.,0. , 0.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,1. , 0.,0.,0.,0. ],

    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 1.,0.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,1.,0.,0. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,1. ],
    [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,1.,0. ] ])

t = toffoli(4, [3,0])
print (t)
#assert np.allclose(t,g32)
