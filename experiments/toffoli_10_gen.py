import numpy as np
import ctypes

from qunitary import get_unitary_gate_10

np.set_printoptions(threshold=np.inf)
np.set_printoptions(linewidth=np.inf)
import sys
import numpy
numpy.set_printoptions(threshold=sys.maxsize)




# # X
# # C
# # C
g8 = np.array([
              [1.,0.,0.,0., 0.,0.,0.,0.],
              [0.,1.,0.,0., 0.,0.,0.,0.],
              [0.,0.,1.,0., 0.,0.,0.,0.],
              [0.,0.,0.,1., 0.,0.,0.,0.],

              [0.,0.,0.,0., 1.,0.,0.,0.],
              [0.,0.,0.,0., 0.,1.,0.,0.],
              [0.,0.,0.,0., 0.,0.,0.,1.],
              [0.,0.,0.,0., 0.,0.,1.,0.],
]) # toffoli
t = get_unitary_gate_10(3, [1], 0)
print (t)
assert np.allclose(t,g8)


# X
# C
# I
# C
g8 = np.array([
              [1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],

              [0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0, 0.,0.,0.,0],

              [0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1, 0.,0.,0.,0],

              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 1.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,1.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,1],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,1.,0],
]) # toffoli
t = get_unitary_gate_10(4, [3], 0)
print (t)
assert np.allclose(t,g8)




# X
# I
# C
# C
g8 = np.array([
              [1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],

              [0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0, 0.,0.,0.,0],

              [0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0, 0.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1, 0.,0.,0.,0],

              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 1.,0.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,1.,0.,0],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,0.,1],
              [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0, 0.,0.,1.,0],
]) # toffoli
t = get_unitary_gate_10(4, [3], 0)
print (t)
assert np.allclose(t,g8)






# # X
# # I
# # C
# # I
# # C
# g32 = np.array([
#     [1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#     [0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  1.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,1.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,1.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,1., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 1.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,1.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,1. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,1.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 1.,0.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,1.,0.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,1.,0. , 0.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,1. , 0.,0.,0.,0. ],
#
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 1.,0.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,1.,0.,0. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,1. ],
#     [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,1.,0. ] ])
#
# t = toffoli(5, [3,0])
# print (t)
# assert np.allclose(t,g32)
