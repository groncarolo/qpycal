# import numpy as np
# zero = np.array([1.,0.])
# one = np.array([0.,1.])
#
# E00 = np.outer (zero, np.conjugate(zero).T)
# E01 = np.outer (zero, np.conjugate(one).T)
# E10 = np.outer (one, np.conjugate(zero).T)
# E11 = np.outer (one, np.conjugate(one).T)
# # C
# # C
# # I
# # X
# # cnot ij i control j target
# g16 = np.array([
#               [1,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0],
#               [0,1,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0],
#               [0,0,1,0, 0,0,0,0, 0,0,0,0, 0,0,0,0],
#               [0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,0,0],
#
#               [0,0,0,0, 1,0,0,0, 0,0,0,0, 0,0,0,0],
#               [0,0,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0],
#               [0,0,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,0],
#               [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1],
#
#               [0,0,0,0, 0,0,0,0, 1,0,0,0, 0,0,0,0],
#               [0,0,0,0, 0,0,0,0, 0,1,0,0, 0,0,0,0],
#               [0,0,0,0, 0,0,0,0, 0,0,1,0, 0,0,0,0],
#               [0,0,0,1, 0,0,0,0, 0,0,0,0, 0,0,0,0],
#
#               [0,0,0,0, 0,0,0,0, 0,0,0,0, 1,0,0,0],
#               [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,1,0,0],
#               [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,1,0],
#               [0,0,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0],
# ]) # cnot
#
#
#
#
#
# state_shape=16
# zero = np.array([1.,0.])
# one = np.array([0.,1.])
# ide2 = np.identity(2)
# idex = np.identity(state_shape//4)
#
# a = np.kron(idex, np.kron(E00, ide2))
#
# E00=np.outer (zero, np.conjugate(zero).T)
# E01=np.outer (zero, np.conjugate(one).T)
# E10=np.outer (one, np.conjugate(zero).T)
# E11=np.outer (one, np.conjugate(one).T)
#
# idex = np.identity(state_shape//8)
# b = np.kron(np.kron(E01,np.kron(idex, E11)), E11)
# c = np.kron(np.kron(E10,np.kron(idex, E11)), E11)
#
#
# # NOT YET!
# d = np.kron(np.kron(idex,np.kron(E00, E11)), E00)
# e = np.kron(np.kron(idex,np.kron(E11, E00)), E11)
#
#
# r = a+b+c+d+e
# assert(np.allclose(r, g16))
#
#
#
#
#
# # X
# # I
# # C
# # C
# # cnot ij i control j target
# g16 = np.array([
#               [1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0.]
# ]) # cnot
# state_shape=16
#
# def toffoli(state_shape):
#     zero = np.array([1.,0.])
#     one = np.array([0.,1.])
#     ide2 = np.identity(2)
#     idex = np.identity(state_shape//4)
#     E00=np.outer (zero, np.conjugate(zero).T)
#     E01=np.outer (zero, np.conjugate(one).T)
#     E10=np.outer (one, np.conjugate(zero).T)
#     E11=np.outer (one, np.conjugate(one).T)
#     a = np.kron(E00, np.kron(idex, ide2))
#     idex = np.identity(state_shape//8)
#     b = np.kron(E11, np.kron(E00,np.kron(idex, ide2)))
#     gnot = np.array([[0., 1.], [1., 0.]]) # not
#     c = np.kron(E11, np.kron(E11,np.kron(idex, gnot)))
#     return a+b+c
#
# r = toffoli(state_shape)
# assert np.allclose(r,g16)
#
#
#
# g8 = np.array([
#               [1.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,1.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,1.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,1., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 1.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,1.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,1.],
#               [0.,0.,0.,0., 0.,0.,1.,0.],
# ]) # cnot
#
# state_shape=8
# r = toffoli(state_shape)
# assert np.allclose(r,g8)
#
#
#
#
# # X
# # I
# # C
# # I
# # C
# # cnot ij i control j target
# g32 = np.array([
#               [1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  1.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,1.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,1.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,1., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 1.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,1.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,1. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,1.,0. , 0.,0.,0.,0. , 0.,0.,0.,0. ],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 1.,0.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,1.,0.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,1.,0. , 0.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,1. , 0.,0.,0.,0. ],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 1.,0.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,1.,0.,0. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,0.,1. ],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.,  0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0. , 0.,0.,1.,0. ] ])
#
# np.set_printoptions(threshold=np.inf)
# np.set_printoptions(linewidth=np.inf)
# import sys
# import numpy
# numpy.set_printoptions(threshold=sys.maxsize)
#
# def toffoli(state_shape, ctrls):
#     zero = np.array([1.,0.])
#     one = np.array([0.,1.])
#     ide2 = np.identity(2)
#     idex = np.identity(state_shape//4)
#     E00=np.outer (zero, np.conjugate(zero).T)
#     E01=np.outer (zero, np.conjugate(one).T)
#     E10=np.outer (one, np.conjugate(zero).T)
#     E11=np.outer (one, np.conjugate(one).T)
#     gnot = np.array([[0., 1.], [1., 0.]]) # not
#     a = np.kron(E00, np.kron(idex, ide2))
#     r = a
#     b = np.kron(E11,np.kron(E00, np.kron(E00,np.kron(E00, np.identity(2)))))
#     r = r + b
#     b = np.kron(E11,np.kron(E00, np.kron(E00,np.kron(E11, np.identity(2)))))
#     r = r + b
#     b = np.kron(E11,np.kron(E00, np.kron(E11,np.kron(E00, np.identity(2)))))
#     r = r + b
#     b = np.kron(E11,np.kron(E00, np.kron(E11,np.kron(E11, gnot))))
#     r = r + b
#     b = np.kron(E11,np.kron(E11, np.kron(E00,np.kron(E00, np.identity(2)))))
#     r = r + b
#     b = np.kron(E11,np.kron(E11, np.kron(E00,np.kron(E11, np.identity(2)))))
#     r = r + b
#     b = np.kron(E11,np.kron(E11, np.kron(E11,np.kron(E00, np.identity(2)))))
#     r = r + b
#     b = np.kron(E11,np.kron(E11, np.kron(E11,np.kron(E11, gnot))))
#     r = r + b
#     return r
#
#
# state_shape=32
# r = toffoli(state_shape, [])
# assert np.allclose(r,g32)
