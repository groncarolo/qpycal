import numpy as np

from qgates import xgate
from qunitary import get_unitary_gate_10, get_unitary_gate_01, get_unitary_agate_10, get_unitary_agate_01

def test_unitary_1():
    # #############################################################################
    # C  2
    # C  1
    # X  0
    # #############################################################################
    g = np.array([  # 3            7
        [1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1.],  # 3

        [0., 0., 0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0.],  # 7
    ])
    print("C")
    print("C")
    print("X")
    r = get_unitary_gate_10(3, [2, 1], xgate())
    assert np.allclose(g, r)
    # #############################################################################


def test_unitary_2():
    #############################################################################
    # C  3
    # C  2
    # I  1
    # X  0
    #############################################################################
    g = np.array([  # 3*            7*          11*          15*
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],  # 3*

        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],  # 7*

        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],  # 11*

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],  # 15*
    ])

    print("C")
    print("C")
    print("I")
    print("X")
    r = get_unitary_gate_10(4, [3, 2], xgate())
    assert np.allclose(g, r)
    #############################################################################


def test_unitary_3():
    #############################################################################
    # C 3
    # I 2
    # C 1
    # X 0
    #############################################################################
    g = np.array([
        #                       3     5*     7*          11     13*   15*
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],  # 3

        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],  # 5*
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],  # 7*

        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],  # 11

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],  # 13*
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],  # 15*
    ])  # toffoli

    print("C")
    print("I")
    print("C")
    print("X")
    r = get_unitary_gate_10(4, [3, 1], xgate())
    assert np.allclose(g, r)
    #############################################################################



def test_unitary_4():
    #############################################################################
    # C  4
    # C  3
    # I  2
    # I  1
    # X  0
    ############################################################################
    g = np.array([  # 3*           7*          11*          15*           19*          23*          27*          31*
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 3*

        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 7*

        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0, 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0.],  # 11*

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 1.],  # 15*

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 19*

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 23*

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 27*

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 31*
    ])

    print("C")
    print("C")
    print("I")
    print("I")
    print("X")
    r = get_unitary_gate_10(5, [4, 3], xgate())
    assert np.allclose(g, r)
    ############################################################################

def test_unitary_5():
    ############################################################################
    # C 4
    # I 3
    # C 2
    # I 1
    # X 0
    g = np.array([
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 3

        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 7*

        [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 11

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         1., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 1.],  # 15*

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 19

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 23

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
         0., 0., 0.],  # 27*

        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0.],  # 31*
    ])  # toffoli

    print("C")
    print("I")
    print("C")
    print("I")
    print("X")

    r = get_unitary_gate_10(5, [4, 2], xgate())
    assert np.allclose(g, r)
    ############################################################################


############################################################################
# C 4
# I 3
# I 2
# C 1
# X 0
############################################################################
g = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],

    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],

    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
     0., 0., 0.],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 1.],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
     0., 0., 0.],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
])

r = get_unitary_gate_10(5, [4, 1], xgate())
assert np.allclose(g, r)
############################################################################


##########################################################################
# X
# C
# C
##########################################################################
g = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0.],

    [0., 0., 0., 0., 1., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1.],
    [0., 0., 0., 0., 0., 0., 1., 0.],
])  # toffoli
t = get_unitary_gate_01(3, [1, 2], xgate())
print("X")
print("C")
print("C")
assert np.allclose(t, g)
print("OK")
##########################################################################


##########################################################################
# X
# C
# I
# C
##########################################################################
g = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 1., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 1., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 1],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 1., 0],
])  # toffoli
print("X")
print("C")
print("I")
print("C")
t = get_unitary_gate_01(4, [1, 3], xgate())
assert np.allclose(t, g)
print("OK")
##########################################################################


##########################################################################
# X
# I
# C
# C
##########################################################################
g = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 1., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 1., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 1],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 1., 0],
])  # toffoli
print("X")
print("I")
print("C")
print("C")
t = get_unitary_gate_01(4, [2, 3], xgate())
assert np.allclose(t, g)
print("OK")
##########################################################################


# #############################################################################
# A  2
# A  1
# X  0
# #############################################################################
g = np.array([  # 3            7
    [0., 0., 0., 0., 1., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0.],  # 3

    [1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1.],  # 7
])
print("A")
print("A")
print("X")
r = get_unitary_agate_10(3, [2, 1], xgate())
assert np.allclose(g, r)
# #############################################################################


#############################################################################
# A  3
# A  2
# I  1
# X  0
#############################################################################
g = np.array([  # 3*            7*          11*          15*
    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],  # 3*

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],  # 7*

    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],  # 11*

    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],  # 15*
])

print("A")
print("A")
print("I")
print("X")
r = get_unitary_agate_10(4, [3, 2], xgate())
assert np.allclose(g, r)
#############################################################################


#############################################################################
# A 3
# I 2
# A 1
# X 0
#############################################################################
g = np.array([
    #                       3     5*     7*          11     13*   15*
    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],  # 3

    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],  # 5*
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],  # 7*

    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],  # 11

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],  # 13*
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],  # 15*
])  # toffoli

print("A")
print("I")
print("A")
print("X")
print("OK")
r = get_unitary_agate_10(4, [3, 1], xgate())
assert np.allclose(g, r)
#############################################################################
#
#
#
# #############################################################################
# # C  4
# # C  3
# # I  2
# # I  1
# # X  0
# ############################################################################
# g = np.array( [#        3*           7*          11*          15*           19*          23*          27*          31*
#               [1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.], #3*
#
#               [0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0.], #7*
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0 , 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0.], #11*
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1.], #15*
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.], #19*
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.], #23*
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.], #27*
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.], #31*
# ])
#
# print("C")
# print("C")
# print("I")
# print("I")
# print("X")
#
# x=8
# a = np.kron(np.identity(x), np.kron(E00, np.identity(2)))
# b = np.kron(np.identity(x), np.kron(E11, E00))
#
# c = np.kron(np.kron(np.kron(E01, np.identity(x//2)), E11), E11)
# d = np.kron(np.kron(np.kron(E10, np.identity(x//2)), E11), E11)
#
# r=a+b+c+d
# assert np.allclose(g, r) #OK!!
# print ("OK")
# r = get_unitary_gate_10(5, [4,3])
# assert np.allclose(g, r)
# ############################################################################
#


# ############################################################################4
# A 4
# I 3
# A 2
# I 1
# X 0
g = np.array([
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    # 3

    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    # 7*

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    # 11

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    # 15*

    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    # 19

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    # 23

    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
     0., 0., 0.],
    # 27*

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
     0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
     0., 0., 1.],
    # 31*
])  # toffoli
print("A")
print("I")
print("A")
print("I")
print("X")

r = get_unitary_agate_10(5, [4, 2], xgate())
assert np.allclose(g, r)
############################################################################
#
#
#
# ############################################################################
#  # C 4
#  # I 3
#  # I 2
#  # C 1
#  # X 0
# ############################################################################
# g = np.array([
#               [1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0 , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1.],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 1.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,1.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,1.,0.],
#               [0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,1. , 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0., 0.,0.,0.,0.],
# ])
#
# x = 4
# r = np.kron(np.kron(np.kron(E01, E11), np.identity(x)), E11) #OK
# r = r + np.kron(np.kron(np.kron(E10, E11), np.identity(x)), E11) #OK
#
# r = r + np.kron(E00,np.kron(E00, np.kron(ide2, np.identity(x))))
# r = r + np.kron(E11,np.kron(E00, np.kron(ide2, np.identity(x))))
#
# r = r + np.kron(E00,np.kron(E11, np.kron(np.identity(x), E00)))
# r = r + np.kron(E11,np.kron(E11, np.kron(np.identity(x), E00))) # WORKS!
#
# print("C")
# print("I")
# print("C")
# print("I")
# print("X")
# assert np.allclose(g, r) #OK
# print ("OK")
# r = get_unitary_gate_10(5, [4,1])
# assert np.allclose(g, r)
# ############################################################################
#
# r = get_unitary_gate_10(6, [5,4])
# print (r)
# r = get_unitary_gate_10(6, [5,3])
# print (r)
# r = get_unitary_gate_10(6, [5,2])
# print (r)
# r = get_unitary_gate_10(6, [5,1])
# print (r)


##########################################################################
# # X
# # A
# # A
##########################################################################
g = np.array([
    [0., 1., 0., 0., 0., 0., 0., 0.],
    [1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0.],

    [0., 0., 0., 0., 1., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1.],
])  # toffoli
print("X")
print("A")
print("A")
t = get_unitary_agate_01(3, [1, 2], xgate())
assert np.allclose(t, g)
print("OK")
##########################################################################


#########################################################################
# X
# A
# I
# A
##########################################################################
g = np.array([
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 1., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 1., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 1., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 1],
])  # toffoli
print("X")
print("A")
print("I")
print("A")
t = get_unitary_agate_01(4, [1, 3], xgate())
assert np.allclose(t, g)
print("OK")
##########################################################################


# X
# I
# A
# A
g = np.array([
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0, 0., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1, 0., 0., 0., 0],

    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 1., 0., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 1., 0., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 1., 0],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0, 0., 0., 0., 1],
])  # toffoli
print("X")
print("I")
print("A")
print("A")
t = get_unitary_agate_01(4, [2, 3], xgate())
assert np.allclose(t, g)
print("OK")
